{"version":3,"sources":["../src/textlint-rule-alex.js"],"names":["defaultOptions","allow","module","exports","textlintRuleAlex","context","options","Syntax","RuleError","report","getSource","helper","RuleHelper","allowWords","reportError","node","result","ruleError","ruleId","message","line","column","Str","isChildNode","Link","Image","BlockQuote","Emphasis","text","messages","forEach"],"mappings":"AAAA;AACA;;AACA;;AACA;;;;;;;;AACA,IAAMA,iBAAiB;AACnBC,WAAO;AADY,CAAvB;AAGAC,OAAOC,OAAP,GAAiB,SAASC,gBAAT,CAA0BC,OAA1B,EAAiD;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAAA,QACvDC,MADuD,GACfF,OADe,CACvDE,MADuD;AAAA,QAC/CC,SAD+C,GACfH,OADe,CAC/CG,SAD+C;AAAA,QACpCC,MADoC,GACfJ,OADe,CACpCI,MADoC;AAAA,QAC5BC,SAD4B,GACfL,OADe,CAC5BK,SAD4B;;AAE9D,QAAMC,SAAS,IAAIC,8BAAJ,CAAeP,OAAf,CAAf;AACA,QAAMQ,aAAaP,QAAQL,KAAR,IAAiBD,eAAeC,KAAnD;AACA;;;;;;;;;;;;;AAaA,QAAMa,cAAc,SAAdA,WAAc,CAACC,IAAD,EAAOC,MAAP,EAAkB;AAClC,YAAMC,YAAY,IAAIT,SAAJ,OAAkBQ,OAAOE,MAAzB,UAAoCF,OAAOG,OAA3C,EAAsD;AACpEC,kBAAMJ,OAAOI,IAAP,GAAc,CADgD;AAEpEC,oBAAQL,OAAOK,MAAP,GAAgB;AAF4C,SAAtD,CAAlB;AAIAZ,eAAOM,IAAP,EAAaE,SAAb;AACH,KAND;AAOA,+BACKV,OAAOe,GADZ,YACiBP,IADjB,EACsB;AACd,YAAIJ,OAAOY,WAAP,CAAmBR,IAAnB,EAAyB,CAACR,OAAOiB,IAAR,EAAcjB,OAAOkB,KAArB,EAA4BlB,OAAOmB,UAAnC,EAA+CnB,OAAOoB,QAAtD,CAAzB,CAAJ,EAA+F;AAC3F;AACH;AACD,YAAMC,OAAOlB,UAAUK,IAAV,CAAb;AACA,YAAMc,WAAW,oBAAKD,IAAL,EAAWf,UAAX,EAAuBgB,QAAxC;AACAA,iBAASC,OAAT,CAAiB,UAACd,MAAD,EAAY;AACzBF,wBAAYC,IAAZ,EAAkBC,MAAlB;AACH,SAFD;AAGH,KAVL;AAYH,CApCD","file":"textlint-rule-alex.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport {RuleHelper} from \"textlint-rule-helper\";\nimport alex from \"alex\";\nconst defaultOptions = {\n    allow: []\n};\nmodule.exports = function textlintRuleAlex(context, options = {}) {\n    const {Syntax, RuleError, report, getSource} = context;\n    const helper = new RuleHelper(context);\n    const allowWords = options.allow || defaultOptions.allow;\n    /*\n    { [1:5-1:14: `boogeyman` may be insensitive, use `boogey` instead]\n    message: '`boogeyman` may be insensitive, use `boogey` instead',\n    name: '1:5-1:14',\n    file: '',\n    reason: '`boogeyman` may be insensitive, use `boogey` instead',\n    line: 1,\n    column: 5,\n    location: Position { start: [Object], end: [Object] },\n    fatal: false,\n    ruleId: 'boogeyman-boogeywoman',\n    source: 'retext-equality' }\n     */\n    const reportError = (node, result) => {\n        const ruleError = new RuleError(`[${result.ruleId}] ${result.message}`, {\n            line: result.line - 1,\n            column: result.column - 1\n        });\n        report(node, ruleError);\n    };\n    return {\n        [Syntax.Str](node){\n            if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {\n                return;\n            }\n            const text = getSource(node);\n            const messages = alex(text, allowWords).messages;\n            messages.forEach((result) => {\n                reportError(node, result);\n            });\n        }\n    }\n}"]}